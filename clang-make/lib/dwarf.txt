import * as argparse from 'argparse';
import * as json from 'json';
import * as logging from 'logging';
import { floor, log } from 'math';
import * as os from 'os';
import * as re from 're';
import { PIPE, Popen } from 'subprocess';
import { Path } from 'pathlib';
import * as sys from 'sys';

var _pj;

var __rootdir__, __scriptdir__, logger;

function _pj_snippets(container) {
  function in_es6(left, right) {
    if (right instanceof Array || typeof right === "string") {
      return right.indexOf(left) > -1;
    } else {
      if (right instanceof Map || right instanceof Set || right instanceof WeakMap || right instanceof WeakSet) {
        return right.has(left);
      } else {
        return left in right;
      }
    }
  }

  container["in_es6"] = in_es6;
  return container;
}

_pj = {};

_pj_snippets(_pj);
/*Utility tools that extracts DWARF information encoded in a wasm output
produced by the LLVM tools, and encodes it as a wasm source map. Additionally,
it can collect original sources, change files prefixes, and strip debug
sections from a wasm file.*/


__scriptdir__ = os.path.dirname(os.path.abspath(__file__));
__rootdir__ = os.path.dirname(__scriptdir__);
sys.path.append(__rootdir__);
logger = logging.getLogger("wasm-sourcemap");

function parse_args() {
  var parser;
  parser = new argparse.ArgumentParser({
    "prog": "wasm-sourcemap.py",
    "description": __doc__
  });
  parser.add_argument("wasm", {
    "help": "wasm file"
  });
  parser.add_argument("-o", "--output", {
    "help": "output source map"
  });
  parser.add_argument("-p", "--prefix", {
    "nargs": "*",
    "help": "replace source debug filename prefix for source map",
    "default": []
  });
  parser.add_argument("-s", "--sources", {
    "action": "store_true",
    "help": "read and embed source files from file system into source map"
  });
  parser.add_argument("-l", "--load-prefix", {
    "nargs": "*",
    "help": "replace source debug filename prefix for reading sources from file system (see also --sources)",
    "default": []
  });
  parser.add_argument("-w", {
    "nargs": "?",
    "help": "set output wasm file"
  });
  parser.add_argument("-x", "--strip", {
    "action": "store_true",
    "help": "removes debug and linking sections"
  });
  parser.add_argument("-u", "--source-map-url", {
    "nargs": "?",
    "help": "specifies sourceMappingURL section contest"
  });
  parser.add_argument("--dwarfdump", {
    "help": "path to llvm-dwarfdump executable"
  });
  parser.add_argument("--dwarfdump-output", {
    "nargs": "?",
    "help": argparse.SUPPRESS
  });
  parser.add_argument("--basepath", {
    "help": "base path for source files, which will be relative to this"
  });
  return parser.parse_args();
}

class Prefixes {
  constructor(args) {
    var prefix, prefixes, replacement;
    prefixes = [];

    for (var p, _pj_c = 0, _pj_a = args, _pj_b = _pj_a.length; _pj_c < _pj_b; _pj_c += 1) {
      p = _pj_a[_pj_c];

      if (_pj.in_es6("=", p)) {
        [prefix, replacement] = p.split("=");
        prefixes.append({
          "prefix": prefix,
          "replacement": replacement
        });
      } else {
        prefixes.append({
          "prefix": p,
          "replacement": null
        });
      }
    }

    this.prefixes = prefixes;
    this.cache = {};
  }

  resolve(name) {
    var result;

    if (_pj.in_es6(name, this.cache)) {
      return this.cache[name];
    }

    for (var p, _pj_c = 0, _pj_a = this.prefixes, _pj_b = _pj_a.length; _pj_c < _pj_b; _pj_c += 1) {
      p = _pj_a[_pj_c];

      if (name.startswith(p["prefix"])) {
        if (p["replacement"] === null) {
          result = name.slice(p["prefix"].length);
        } else {
          result = p["replacement"] + name.slice(p["prefix"].length);
        }

        break;
      }
    }

    this.cache[name] = result;
    return result;
  }

}

class SourceMapPrefixes {
  constructor(sources, load) {
    this.sources = sources;
    this.load = load;
  }

  provided() {
    return bool(this.sources.prefixes || this.load.prefixes);
  }

}

function encode_vlq(n) {
  var VLQ_CHARS, result, x;
  VLQ_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  x = n >= 0 ? n << 1 : (-n << 1) + 1;
  result = "";

  while (x > 31) {
    result = result + VLQ_CHARS[32 + (x & 31)];
    x = x >> 5;
  }

  return result + VLQ_CHARS[x];
}

function read_var_uint(wasm, pos) {
  var b, n, shift;
  n = 0;
  shift = 0;
  b = ord(wasm.slice(pos, pos + 1));
  pos = pos + 1;

  while (b >= 128) {
    n = n | b - 128 << shift;
    b = ord(wasm.slice(pos, pos + 1));
    pos = pos + 1;
    shift += 7;
  }

  return [n + (b << shift), pos];
}

function strip_debug_sections(wasm) {
  var name, name_end, name_len, name_pos, pos, pos_, section_body, section_id, section_size, section_start, stripped;
  logger.debug("Strip debug sections");
  pos = 8;
  stripped = wasm.slice(0, pos);

  while (pos < wasm.length) {
    section_start = pos;
    [section_id, pos] = read_var_uint(wasm, pos);
    [section_size, section_body] = read_var_uint(wasm, pos);
    pos = section_body + section_size;

    if (section_id === 0) {
      [name_len, name_pos] = read_var_uint(wasm, section_body);
      name_end = name_pos + name_len;
      name = wasm.slice(name_pos, name_end);

      if (name === "linking" || name === "sourceMappingURL" || name.startswith("reloc..debug_") || name.startswith(".debug_")) {
        continue;
      }
    }

    stripped = stripped + wasm.slice(section_start, pos);
  }

  return stripped;
}

function encode_uint_var(n) {
  var result;
  result = bytearray();

  while (n > 127) {
    result.append(128 | n & 127);
    n = n >> 7;
  }

  result.append(n);
  return bytes(result);
}

function append_source_mapping(wasm, url) {
  var section_content, section_name;
  logger.debug("Append sourceMappingURL section");
  section_name = "sourceMappingURL";
  section_content = encode_uint_var(section_name.length) + section_name + encode_uint_var(url.length) + url;
  return wasm + encode_uint_var(0) + encode_uint_var(section_content.length) + section_content;
}

function get_code_section_offset(wasm) {
  var pos, pos_, section_id, section_size;
  logger.debug("Read sections index");
  pos = 8;

  while (pos < wasm.length) {
    [section_id, pos] = read_var_uint(wasm, pos);
    [section_size, pos] = read_var_uint(wasm, pos);

    if (section_id === 10) {
      return pos;
    }

    pos = pos + section_size;
  }
}

function remove_dead_entries(entries) {
  var block_start, cur_entry, fn_size_length, fn_start, min_live_offset;
  block_start = 0;
  cur_entry = 0;

  while (cur_entry < entries.length) {
    if (!entries[cur_entry]["eos"]) {
      cur_entry += 1;
      continue;
    }

    fn_start = entries[block_start]["address"];
    fn_size_length = floor(log(entries[cur_entry]["address"] - fn_start + 1, 128)) + 1;
    min_live_offset = 1 + fn_size_length;

    if (fn_start < min_live_offset) {
      delete entries.slice(block_start, cur_entry + 1);
      cur_entry = block_start;
      continue;
    }

    cur_entry += 1;
    block_start = cur_entry;
  }
}

function read_dwarf_entries(wasm, options) {
  var comp_dir, comp_dir_match, debug_line_chunks, dir, entries, entry, err, exit_code, file_path, files, include_directories, line_chunk, maybe_debug_info_content, output, process, stmt_list;

  if (options.dwarfdump_output) {
    output = new Path(options.dwarfdump_output).read_bytes();
  } else {
    if (options.dwarfdump) {
      logger.debug("Reading DWARF information from %s" % wasm);

      if (!os.path.exists(options.dwarfdump)) {
        logger.error("llvm-dwarfdump not found: " + options.dwarfdump);
        sys.exit(1);
      }

      process = new Popen([options.dwarfdump, "-debug-info", "-debug-line", "--recurse-depth=0", wasm], {
        "stdout": PIPE
      });
      [output, err] = process.communicate();
      exit_code = process.wait();

      if (exit_code !== 0) {
        logger.error("Error during llvm-dwarfdump execution (%s)" % exit_code);
        sys.exit(1);
      }
    } else {
      logger.error("Please specify either --dwarfdump or --dwarfdump-output");
      sys.exit(1);
    }
  }

  entries = [];
  debug_line_chunks = re.split("debug_line\\[(0x[0-9a-f]*)\\]", output.decode("utf-8"));
  maybe_debug_info_content = debug_line_chunks[0];

  for (var i = 1, _pj_a = debug_line_chunks.length; i < _pj_a; i += 2) {
    stmt_list = debug_line_chunks[i];
    comp_dir_match = re.search("DW_AT_stmt_list\\s+\\(" + stmt_list + "\\)\\s+" + "DW_AT_comp_dir\\s+\\(\\\"([^\\\"]+)", maybe_debug_info_content);
    comp_dir = comp_dir_match !== null ? comp_dir_match.group(1) : "";
    line_chunk = debug_line_chunks[i + 1];
    include_directories = {
      "0": comp_dir
    };

    for (var dir, _pj_d = 0, _pj_b = re.finditer("include_directories\\[\\s*(\\d+)\\] = \\\"([^\\\"]*)", line_chunk), _pj_c = _pj_b.length; _pj_d < _pj_c; _pj_d += 1) {
      dir = _pj_b[_pj_d];
      include_directories[dir.group(1)] = dir.group(2);
    }

    files = {};

    for (var file, _pj_d = 0, _pj_b = re.finditer("file_names\\[\\s*(\\d+)\\]:\\s+name: \\\"([^\\\"]*)\\\"\\s+dir_index: (\\d+)", line_chunk), _pj_c = _pj_b.length; _pj_d < _pj_c; _pj_d += 1) {
      file = _pj_b[_pj_d];
      dir = include_directories[file.group(3)];
      file_path = (file.group(2)[0] !== "/" ? dir + "/" : "") + file.group(2);
      files[file.group(1)] = file_path;
    }

    for (var line, _pj_d = 0, _pj_b = re.finditer("\\n0x([0-9a-f]+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)(.*?end_sequence)?", line_chunk), _pj_c = _pj_b.length; _pj_d < _pj_c; _pj_d += 1) {
      line = _pj_b[_pj_d];
      entry = {
        "address": Number.parseInt(line.group(1), 16),
        "line": Number.parseInt(line.group(2)),
        "column": Number.parseInt(line.group(3)),
        "file": files[line.group(4)],
        "eos": line.group(5) !== null
      };

      if (!entry["eos"]) {
        entries.append(entry);
      } else {
        entry["address"] -= 1;

        if (entries.slice(-1)[0]["address"] === entry["address"]) {
          entries.slice(-1)[0]["eos"] = true;
        } else {
          entries.append(entry);
        }
      }
    }
  }

  remove_dead_entries(entries);
  return sorted(entries, {
    "key": entry => {
      return entry["address"];
    }
  });
}

function normalize_path(path) {
  return path.replace("\\", "/").replace("//", "/");
}

function build_sourcemap(entries, code_section_offset, prefixes, collect_sources, base_path) {
  var address, address_delta, column, column_delta, file_name, infile, last_address, last_column, last_line, last_source_id, line, line_delta, load_name, mappings, source_content, source_id, source_id_delta, source_name, sources, sources_content, sources_map;
  sources = [];
  sources_content = collect_sources ? [] : null;
  mappings = [];
  sources_map = {};
  last_address = 0;
  last_source_id = 0;
  last_line = 1;
  last_column = 1;

  for (var entry, _pj_c = 0, _pj_a = entries, _pj_b = _pj_a.length; _pj_c < _pj_b; _pj_c += 1) {
    entry = _pj_a[_pj_c];
    line = entry["line"];
    column = entry["column"];

    if (line === 0) {
      continue;
    }

    if (column === 0) {
      column = 1;
    }

    address = entry["address"] + code_section_offset;
    file_name = entry["file"];
    file_name = normalize_path(file_name);

    if (prefixes.provided()) {
      source_name = prefixes.sources.resolve(file_name);
    } else {
      try {
        file_name = os.path.relpath(file_name, base_path);
      } catch (e) {
        if (e instanceof ValueError) {
          file_name = os.path.abspath(file_name);
        } else {
          throw e;
        }
      }

      file_name = normalize_path(file_name);
      source_name = file_name;
    }

    if (!_pj.in_es6(source_name, sources_map)) {
      source_id = sources.length;
      sources_map[source_name] = source_id;
      sources.append(source_name);

      if (collect_sources) {
        load_name = prefixes.load.resolve(file_name);

        try {
          infile = open(load_name, "r");
          source_content = infile.read();
          sources_content.append(source_content);
        } catch (e) {
          if (e instanceof IOError) {
            console.log("Failed to read source: %s" % load_name);
            sources_content.append(null);
          } else {
            throw e;
          }
        }
      }
    } else {
      source_id = sources_map[source_name];
    }

    address_delta = address - last_address;
    source_id_delta = source_id - last_source_id;
    line_delta = line - last_line;
    column_delta = column - last_column;
    mappings.append(encode_vlq(address_delta) + encode_vlq(source_id_delta) + encode_vlq(line_delta) + encode_vlq(column_delta));
    last_address = address;
    last_source_id = source_id;
    last_line = line;
    last_column = column;
  }

  return {
    "version": 3,
    "names": [],
    "sources": sources,
    "sourcesContent": sources_content,
    "mappings": ",".join(mappings)
  };
}

function main() {
  var code_section_offset, entries, infile, map, options, outfile, prefixes, wasm, wasm_input;
  options = parse_args();
  wasm_input = options.wasm;
  infile = open(wasm_input, "rb");
  wasm = infile.read();
  entries = read_dwarf_entries(wasm_input, options);
  code_section_offset = get_code_section_offset(wasm);
  prefixes = new SourceMapPrefixes({
    "sources": new Prefixes(options.prefix),
    "load": new Prefixes(options.load_prefix)
  });
  logger.debug("Saving to %s" % options.output);
  map = build_sourcemap(entries, code_section_offset, prefixes, options.sources, options.basepath);
  outfile = open(options.output, "w");
  json.dump(map, outfile, {
    "separators": [",", ":"]
  });

  if (options.strip) {
    wasm = strip_debug_sections(wasm);
  }

  if (options.source_map_url) {
    wasm = append_source_mapping(wasm, options.source_map_url);
  }

  if (options.w) {
    logger.debug("Saving wasm to %s" % options.w);
    outfile = open(options.w, "wb");
    outfile.write(wasm);
  }

  logger.debug("Done");
  return 0;
}

if (__name__ === "__main__") {
  logging.basicConfig({
    "level": os.environ.get("EMCC_DEBUG") ? logging.DEBUG : logging.INFO
  });
  sys.exit(main());
}
